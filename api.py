operators = (

  ("RGB",        "-> RGB",     (3, 0), "return CRGB(#3, #2, #1);" ),
  ("HSV",        "-> HSV",     (3, 0), "return CHSV(#3, #2, #1);" ),
  ("HUE",        "-> Hue",     (1, 0), "return CHSV(#1, 255, 255);" ),
  ("VALUE",      "-> Val",     (1, 0), "return CHSV(0, 0, #1);" ),
  None, 
  ("TIME",       "t",          (0, 1), "#0 = time;" ),
  ("TIMESHIFT",  "t<<",        (1, 1), "#1 = (time >> #1);" ),
  ("INDEX",      "i",          (0, 1), "#0 = index;" ),
  ("RANDOM8",    "rnd",        (0, 1), "#0 = random(256);" ),
  ("RANDC",      "rnd*",       (0, 1), "#0 = rnd;" ),
  None, 
  ("RSHIFT",     ">>",         (2, 1), "#2 = #2 >> #1;" ),
  ("LSHIFT",     "<<",         (2, 1), "#2 = #2 << #1;" ),
  ("BITAND",     "&",          (2, 1), "#2 = #2 & #1;" ),
  ("BITOR",      "|",          (2, 1), "#2 = #2 | #1;" ),
  ("BITXOR",     "^",          (2, 1), "#2 = #2 ^ #1;" ),
  ("BITNOT",     "~",          (1, 1), "#1 = ~(#1);" ),
  ("AND",        "&&",         (2, 1), "#2 = #2 && #1;" ),
  ("OR",         "||",         (2, 1), "#2 = #2 || #1;" ),
  ("NOT",        "!",          (1, 1), "#1 = !(#1);" ),
  None, 
  ("PLUS",       "+",          (2, 1), "#2 = #2 + #1;" ),
  ("MINUS",      "-",          (2, 1), "#2 = #2 - #1;" ),
  ("TIMES",      "*",          (2, 1), "#2 = #2 * #1;" ),
  ("DIVIDE",     "/",          (2, 1), "#2 = #2 / #1;" ),
  ("MOD",        "%",          (2, 1), "#2 = #2 % #1;" ),
  ("INC",        "++",         (1, 1), "#1++;" ),
  ("DEC",        "--",         (1, 1), "#1--;" ),
  ("DIFF",       "diff",       (2, 1), "#2 = abs(#2 - #1);" ),
  None, 
  ("EQ",         "==",         (2, 1), "#2 = #2 == #1;" ),
  ("NE",         "!=",         (2, 1), "#2 = #2 != #1;" ),
  ("GT",         ">",          (2, 1), "#2 = #2 > #1;" ),
  ("GE",         ">=",         (2, 1), "#2 = #2 >= #1;" ),
  ("LT",         "<",          (2, 1), "#2 = #2 < #1;" ),
  ("LE",         "<=",         (2, 1), "#2 = #2 <= #1;" ),
  None, 
  ("IFTE",       "if",         (3, 1), "#3 = #3 ? #2 : #1;" ),
  None, 
  ("ABS",        "abs",        (1, 1), "#1 = abs(#1);" ),
  ("MIN",        "min",        (2, 1), "#2 = MIN(#2, #1);" ),
  ("MAX",        "max",        (2, 1), "#2 = MAX(#2, #1);" ),
  None, 
  ("REGA",       "a",          (0, 1), "#0 = reg[0];" ),
  ("REGB",       "b",          (0, 1), "#0 = reg[1];" ),
  ("REGC",       "c",          (0, 1), "#0 = reg[2];" ),
  ("REGD",       "d",          (0, 1), "#0 = reg[3];" ),
  ("REGZ",       "z",          (0, 1), "#0 = reg[REG_IDX];" ),
  ("REGN",       "reg",        (1, 1), "if (#1 >= 0 && #1 <= REG_IDX) #1 = reg[#1]; else #1 = 0;" ),
  ("REGCYC",     "rc",         (0, 1), "#0 = reg[reg[REG_IDX]];" ),
  None, 
  ("STA",        "-> a",       (1, 0), "reg[0] = #1;" ),
  ("STB",        "-> b",       (1, 0), "reg[1] = #1;" ),
  ("STC",        "-> c",       (1, 0), "reg[2] = #1;" ),
  ("STD",        "-> d",       (1, 0), "reg[3] = #1;" ),
  ("STZ",        "-> z",       (1, 0), "reg[REG_IDX] = #1;" ),
  ("STN",        "-> reg",     (2, 0), "if (#1 >= 0 && #1 <= REG_IDX) reg[#1] = #2;" ),
  ("STCYC",      "-> rc",      (1, 0), "reg[reg[REG_IDX]] = #1; reg[REG_IDX] = (reg[REG_IDX] + 1) & REG_MAX;" ),
  None, 
  ("STAIF",      "-> a if",    (2, 0), "if (#1) reg[0] = #2;" ),
  ("STBIF",      "-> b if",    (2, 0), "if (#1) reg[1] = #2;" ),
  ("STCIF",      "-> c if",    (2, 0), "if (#1) reg[2] = #2;" ),
  ("STDIF",      "-> d if",    (2, 0), "if (#1) reg[3] = #2;" ),
  ("STZIF",      "-> z if",    (2, 0), "if (#1) reg[REG_IDX] = #2;" ),
  ("STNIF",      "-> reg if",  (3, 0), "if (#1) if (#2 >= 0 && #2 <= REG_IDX) reg[#2] = #3;" ),
  ("STCYCIF",    "-> rc if",   (2, 0), "if (#1) { reg[reg[REG_IDX]] = #2; reg[REG_IDX] = (reg[REG_IDX] + 1) & REG_MAX; };" ),
  None, 
  ("LOOPSTART",  "do",         (0, 0), "if (loopstart >= 0) break; loopstart = i; loopindex = 0;" ),
  ("LOOPREG",    "l",          (0, 1), "if (loopstart < 0) break; #0 = reg[loopindex];" ),
  ("LOOPMAX",    "loop max",   (2, 1), "#2 = MAX(#2, #1); if (loopindex++ < REG_MAX) i = loopstart; else loopstart = -1;" ),
  None, 
  ("TDIFF",      "|t-|",       (1, 1), "#1 = abs(time - #1);" ),
  ("IDIFF",      "|i-|",       (1, 1), "#1 = abs(index - #1);" ),
  None, 
  ("PRINT",      "print",      (1, 1), "Serial.print(#1);" ),

)

other = (
  ("REG_WIDTH" , "4" ),
  ("REG_IDX" ,   "(1<<REG_WIDTH)" ),
  ("REG_MAX" ,   "(REG_IDX - 1)" ),
  ("STACK_SIZE", "64" ),
)
